name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送版本标签，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

env:
  FLUTTER_VERSION: '3.32.0'  # 指定 Flutter 版本
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate code with build_runner
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Create keystore from secrets
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/upload-keystore.jks
          chmod 600 android/upload-keystore.jks

      - name: Create key.properties
        run: |
          cat > android/key.properties << EOF
          storeFile=upload-keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          chmod 600 android/key.properties

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build Android APK
        run: flutter build apk --release

      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed -E 's/version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+)\+.*$/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Rename APK
        run: |
          APK_PATH="build/app/outputs/flutter-apk/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            mv "$APK_PATH" "build/app/outputs/flutter-apk/invest-ledger-v${{ steps.version.outputs.version }}-android.apk"
            echo "APK renamed successfully"
          else
            echo "Error: APK file not found at expected location: $APK_PATH"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/invest-ledger-v${{ steps.version.outputs.version }}-android.apk

  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Generate code with build_runner
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Build Windows
        run: flutter build windows --release

      - name: Get version from pubspec.yaml
        id: version
        shell: powershell
        run: |
          $version = (Select-String -Path "pubspec.yaml" -Pattern "^version:" | ForEach-Object {
            if ($matches = $_.Line -match '^version:\s*([0-9]+\.[0-9]+\.[0-9]+)\+.*') { $matches[1] }
          })
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Detected version: $version"

      - name: List Windows build files (debug)
        shell: powershell
        run: |
          Write-Host "Listing Windows build directory:"
          if (Test-Path "build\windows\runner\Release") {
            Get-ChildItem -Path "build\windows\runner\Release" -Recurse
          } else {
            Write-Host "Release directory not found: build\\windows\\runner\\Release"
          }

      - name: Create Windows archive
        shell: powershell
        run: |
          $releaseDir = "build\windows\runner\Release"
          if (Test-Path $releaseDir) {
            Compress-Archive -Path "$releaseDir\*" -DestinationPath "invest-ledger-v${{ steps.version.outputs.version }}-windows.zip"
            Write-Host "Windows archive created successfully"
          } else {
            Write-Host "Error: Windows build directory not found: $releaseDir"
            exit 1
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: invest-ledger-v${{ steps.version.outputs.version }}-windows.zip

  create-release:
    name: Create GitHub Release
    needs: [build-android, build-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed -E 's/version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+)\+.*$/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./artifacts/

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-app
          path: ./artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # 提取最新版本的更新日志
            CHANGELOG=$(awk '/^## \[?[0-9]/{if(p) exit; p=1; next} p' CHANGELOG.md | head -20)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="Release v${{ steps.version.outputs.version }}"
            fi
          else
            CHANGELOG="Release v${{ steps.version.outputs.version }}"
          fi
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## 🚀 投资账本 v${{ steps.version.outputs.version }}
            
            ### 📱 下载
            - **Android APK**: 适用于 Android 设备
            - **Windows**: 适用于 Windows 10/11
            
            ### 📋 更新内容
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🔧 安装说明
            
            **Android:**
            1. 下载 APK 文件
            2. 在设备上启用 "未知来源" 安装
            3. 安装 APK 文件
            
            **Windows:**
            1. 下载 ZIP 文件
            2. 解压到任意目录
            3. 运行 `invest_ledger.exe`
            
            ---
            
            构建时间: ${{ github.run_started_at }}
            提交: ${{ github.sha }}
          files: |
            ./artifacts/invest-ledger-v${{ steps.version.outputs.version }}-android.apk
            ./artifacts/invest-ledger-v${{ steps.version.outputs.version }}-windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
